Experiment Results
==================

Algorithm 1: Exact_Baseline
--------------------------
Candidates Set: {(0, 10): (np.float64(1.15), np.float64(1.25)), (11, 13): (np.float64(0.1), np.float64(0.30000000000000004)), (12, 13): (np.float64(1.1), np.float64(1.25)), (2, 12): (np.float64(0.8), np.float64(1.05)), (1, 13): (np.float64(0.6), np.float64(0.8)), (4, 13): (np.float64(1.4500000000000002), np.float64(1.65)), (3, 14): (np.float64(1.0), np.float64(1.0499999999999998)), (2, 5): (np.float64(0.75), np.float64(0.85)), (3, 12): (np.float64(0.65), np.float64(0.75)), (11, 14): (np.float64(0.9500000000000001), np.float64(1.15)), (0, 11): (np.float64(1.25), np.float64(1.3)), (5, 8): (np.float64(0.7), np.float64(1.0)), (7, 14): (np.float64(0.95), np.float64(1.0499999999999998)), (1, 4): (np.float64(0.8500000000000001), np.float64(1.05)), (7, 12): (np.float64(0.8999999999999999), np.float64(1.15)), (7, 10): (np.float64(0.8), np.float64(0.8500000000000001)), (10, 14): (np.float64(1.25), np.float64(1.3)), (4, 11): (np.float64(0.95), np.float64(1.05)), (1, 2): (np.float64(1.0), np.float64(1.1)), (1, 7): (np.float64(0.8), np.float64(1.0))}
Execution Time: 80.9915 seconds
API Calls: 120
Entropy (dep) over time: (0, None)

Algorithm 2: Naive
-----------------
Candidates Set: {(4, 13): (np.float64(1.45), np.float64(1.65))}
Execution Time: 38.5110 seconds
API Calls: 56
Entropy (dep) over time: []

Algorithm 3: Max_Prob
--------------------
Candidates Set: {(4, 13): (np.float64(1.45), np.float64(1.65))}
Execution Time: 17.5183 seconds
API Calls: 23
Entropy (dep) over time: [0.899, 1.818, 1.485, 1.256, 0.123, 0.131, 0.274, 0.497, (0, None)]

